wholeDNAofCORONA = "CATTCAGTACATCGATATCGGTAATTATACAGTTTCCTGTTTACCTTTTACAATTAATTGCCAGGAACCTAAATTGGGTAGTCTTGTAGTGCGTTGTTCGTTCTATGAAGACTTTTTAGAGTATCATGACGTTCGTGTTGTTTTAGATTTCATCTAAACGAACAAACTAAAATGTCTGATAATGGACCCCAAAATCAGCGAAATGCACCCCGCATTACGTTTGGTGGACCCTCAGATTCAACTGGCAGTAACCAGAATGGAGAACGCAGTGGGGCGCGATCAAAACAACGTCGGCCCCAAGGTTTACCCAATAATACTGCGTCTTGGTTCACCGCTCTCACTCAACATGGCAAGGAAGACCTTAAATTCCCTCGAGGACAAGGCGTTCCAATTAACACCAATAGCAGTCCAGATGACCAAATTGGCTACTACCGAAGAGCTACCAGACGAATTCGTGGTGGTGACGGTAAAATGAAAGATCTCAGTCCAAGATGGTATTTCTACTACCTAGGAACTGGGCCAGAAGCTGGACTTCCCTATGGTGCTAACAAAGACGGCATCATATGGGTTGCAACTGAGGGAGCCTTGAATACACCAAAAGATCACATTGGCACCCGCAATCCTGCTAACAATGCTGCAATCGTGCTACAACTTCCTCAAGGAACAACATTGCCAAAAGGCTTCTACGCAGAAGGGAGCAGAGGCGGCAGTCAAGCCTCTTCTCGTTCCTCATCACGTAGTCGCAACAGTTCAAGAAATTCAACTCCAGGCAGCAGTAGGGGAACTTCTCCTGCTAGAATGGCTGGCAATGGCGGTGATGCTGCTCTTGCTTTGCTGCTGCTTGACAGATTGAACCAGCTTGAGAGCAAAATGTCTGGTAAAGGCCAACAACAACAAGGCCAAACTGTCACTAAGAAATCTGCTGCTGAGGCTTCTAAGAAGCCTCGGCAAAAACGTACTGCCACTAAAGCATACAATGTAACACAAGCTTTCGGCAGACGTGGTCCAGAACAAACCCAAGGAAATTTTGGGGACCAGGAACTAATCAGACAAGGAACTGATTACAAACATTGGCCGCAAATTGCACAATTTGCCCCCAGCGCTTCAGCGTTCTTCGGAATGTCGCGCATTGGCATGGAAGTCACACCTTCGGGAACGTGGTTGACCTACACAGGTGCCATCAAATTGGATGACAAAGATCCAAATTTCAAAGATCAAGTCATTTTGCTGAATAAGCATATTGACGCATACAAAACATTCCCACCAACAGAGCCTAAAAAGGACAAAAAGAAGAAGGCTGATGAAACTCAAGCCTTACCGCAGAGACAGAAGAAACAGCAAACTGTGACTCTTCTTCCTGCTGCAGATTTGGATGATTTCTCCAAACAATTGCAACAATCCATGAGCAGTGCTGACTCAACTCAGGCCTAAACTCATGCAGACCACACAAGGCAGATGGGCTATATAAACGTTTTCGCTTTTCCGTTTACGATATATAGTCTACTCTTGTGCAGAATGAATTCTCGTAACTACATAGCACAAGTAGATGTAGTTAACTTTAATCTCACATAGCAATCTTTAATCAGTGTGTAACATTAGGGAGGACTTGAAAGAGCCACCACATTTTCACCGAGGCCACGCGGAGTACGATCGAGTGTACAGTGAACAATGCTAGGGAGAGCTGCCTATATGGAAGAGCCCTAATGTGTAAAATTAATTTTAGTAGTGCTATCCCCATGTGATTTTAATAGCTTCTTAGGAGAATGACAAAAAAAAAAAA"

def lofLCS(a,b) #LLCS stand for "Length of Common Substring" of two strings (with the same size)
  x = 0
  for i in 0 .. a.size-1
    if a[i] == b[i]
      x = x + 1
    end
  end
  return x
end

def dNN(a,b) #"Difference in Numbers of Nucleotide" in two strings
  x = 0
  x = x + ( a.count('A') - b.count('A') ).abs
  x = x + ( a.count('T') - b.count('T') ).abs
  x = x + ( a.count('G') - b.count('G') ).abs
  x = x + ( a.count('C') - b.count('C') ).abs
  return x / 2
end

# define (loLCS - dNN) as an index of similarity
def sofS(a,b) #"string of Similarity" returuns a string of + (for similar part) and - (for not similar part)
  for i in 0 .. (b.size - a.size + 1)
    if a.size - lofLCS(a, b.slice(i..i+a.size-1)) + dNN(a, b.slice(i..i+a.size-1)) < 10 #this number is the allowed error
      print '0'
    else
      print '-'
    end
  end
  puts ' '
end

def sofP(a,b) #"string of found Primer" returuns a string of + (for a found primer) and -
  for i in 0 .. (b.size - a.size + 1)
    if a.size - lofLCS(a, b.slice(i..i+a.size-1)) + dNN(a, b.slice(i..i+a.size-1)) < 1
      print '0'
    else
      print '-'
    end
  end
  puts ' '
end

a_1= 'GACCCCAAAATCAGCGAAAT'
a_2= 'CAGATTCAACTGGCAGTAACCAGA'
b_1= 'GGGAGCCTTGAATACACCAAAA'
b_2= 'TGTAGCACGATTGCAGCATTG'
c_1= 'GGCTGGCAATGGCGGTGATGCTGCTCTTGC'
c_2= 'GCGCTGGGGGCAAATTGTGCAATTTGCGGC'
d_1= 'ATGTAGTTAACTTTAATCT'
d_2= 'TAATGTGTAAAATTAATTTT'
w = wholeDNAofCORONA

puts'A'
sofS(a_1,w)
sofP(a_1,w)
sofS(a_2,w)
sofP(a_2,w)

puts'B'
sofS(b_1,w)
sofP(b_1,w)
sofS(b_2,w)
sofP(b_2,w)

puts'C'
sofS(c_1,w)
sofP(c_1,w)
sofS(c_2,w)
sofP(c_2,w)

puts'D'
sofS(d_1,w)
sofP(d_1,w)
sofS(d_2,w)
sofP(d_2,w)
